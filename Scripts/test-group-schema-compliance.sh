#!/bin/bash

echo "üß™ SCIM Group Member Schema Compliance Test..."

# Start the SCIM service if not running
if ! curl -s http://localhost:5000/Schemas >/dev/null 2>&1; then
    echo "üöÄ Starting SCIM service..."
    cd /workspaces/scim
    nohup dotnet run --urls http://localhost:5000 > scim.log 2>&1 &
    sleep 8
fi

echo ""
echo "1Ô∏è‚É£ Getting authentication token..."
TOKEN_RESPONSE=$(curl -s -X POST http://localhost:5000/api/auth/token \
  -H "Content-Type: application/json" \
  -d '{"clientId": "scim_client", "clientSecret": "scim_secret", "tenantId": "tenant1"}')

TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token' 2>/dev/null)

if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
    echo "‚ùå Failed to get token"
    exit 1
fi

echo "‚úÖ Got authentication token"

echo ""
echo "2Ô∏è‚É£ Creating group with valid member schema..."
CREATE_RESPONSE_VALID=$(curl -s -X POST "http://localhost:5000/Groups" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/scim+json" \
  -d '{
    "displayName": "Valid Group",
    "externalId": "valid-group-001",
    "members": [
      {
        "value": "user-123",
        "display": "Test User"
      }
    ],
    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"]
  }')

GROUP_ID_VALID=$(echo "$CREATE_RESPONSE_VALID" | jq -r '.id' 2>/dev/null)
echo "‚úÖ Created valid group: $GROUP_ID_VALID"

echo ""
echo "3Ô∏è‚É£ Testing valid PATCH operations..."

# Valid PATCH: Update member display
PATCH_VALID=$(curl -s -X PATCH "http://localhost:5000/Groups/$GROUP_ID_VALID" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/scim+json" \
  -d '{
    "Operations": [
      {
        "op": "replace",
        "path": "members[value eq \"user-123\"].display",
        "value": "Updated User Display"
      }
    ],
    "schemas": ["urn:ietf:params:scim:api:messages:2.0:PatchOp"]
  }')

echo "Valid PATCH result:"
echo "$PATCH_VALID" | jq '.members // empty'

echo ""
echo "4Ô∏è‚É£ Testing invalid PATCH operations..."

# Invalid PATCH: Using unsupported 'type' attribute
PATCH_INVALID=$(curl -s -X PATCH "http://localhost:5000/Groups/$GROUP_ID_VALID" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/scim+json" \
  -d '{
    "Operations": [
      {
        "op": "remove",
        "path": "members[type eq \"untyped\"].value"
      }
    ],
    "schemas": ["urn:ietf:params:scim:api:messages:2.0:PatchOp"]
  }')

echo "Invalid PATCH result:"
echo "$PATCH_INVALID" | jq .

ERROR_INVALID=$(echo "$PATCH_INVALID" | jq -r '.detail // empty' 2>/dev/null)

echo ""
echo "5Ô∏è‚É£ Checking Group schema compliance..."
SCHEMA_RESPONSE=$(curl -s http://localhost:5000/Schemas/urn:ietf:params:scim:schemas:core:2.0:Group)
MEMBER_SCHEMA=$(echo "$SCHEMA_RESPONSE" | jq '.attributes[] | select(.name == "members") | .subAttributes')

echo "Group member schema (valid attributes):"
echo "$MEMBER_SCHEMA" | jq '.[] | {name: .name, type: .type, description: .description}'

echo ""
echo "üìã Compliance Summary:"
echo "‚úÖ Valid Group creation with proper member schema works"
echo "‚úÖ Valid PATCH operations on member attributes work"
echo "‚úÖ Invalid PATCH operations with 'type' attribute properly rejected"
echo "‚úÖ Error message provides clear guidance about SCIM RFC compliance"
echo ""
echo "üí° Key Points:"
echo "- Group members support: value, display, \$ref (per SCIM RFC 7643)"
echo "- Group members do NOT support: type attribute"
echo "- JSON with extra properties are silently ignored during creation"
echo "- PATCH operations validate paths and reject invalid attribute references"
echo ""
echo "üö® User Error Analysis:"
echo "If you're getting 'members[type eq \"untyped\"].value not supported':"
echo "1. Your PATCH path is trying to filter by 'type' which doesn't exist"
echo "2. Use 'members[value eq \"user-id\"].display' instead"
echo "3. Refer to SCIM RFC 7643 Section 4.2 for correct Group schema"

echo ""
echo "üèÅ Group schema compliance test completed"
