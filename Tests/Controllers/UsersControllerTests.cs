using FluentAssertions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Moq;
using ScimServiceProvider.Controllers;
using ScimServiceProvider.Models;
using ScimServiceProvider.Services;
using ScimServiceProvider.Tests.Helpers;
using System.Security.Claims;
using Xunit;

namespace ScimServiceProvider.Tests.Controllers
{
    public class UsersControllerTests
    {
        private readonly Mock<IUserService> _mockUserService;
        private readonly UsersController _controller;
        private readonly List<ScimUser> _testUsers;

        public UsersControllerTests()
        {
            _testUsers = ScimTestDataGenerator.GenerateUsers(10);
            _mockUserService = MockServiceProviders.CreateMockUserService(_testUsers);
            _controller = new UsersController(_mockUserService.Object);

            // Setup controller context with authentication
            SetupControllerContext();
        }

        private void SetupControllerContext()
        {
            var claims = new List<Claim>
            {
                new(ClaimTypes.NameIdentifier, "test-user"),
                new("client_id", "scim_client")
            };
            var identity = new ClaimsIdentity(claims, "Bearer");
            var principal = new ClaimsPrincipal(identity);

            _controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext
                {
                    User = principal
                }
            };
        }

        [Fact]
        public async Task GetUser_WithValidId_ReturnsOkWithUser()
        {
            // Arrange
            var testUser = _testUsers.First();

            // Act
            var result = await _controller.GetUser(testUser.Id!);

            // Assert
            var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
            var returnedUser = okResult.Value.Should().BeOfType<ScimUser>().Subject;
            returnedUser.Id.Should().Be(testUser.Id);
        }

        [Fact]
        public async Task GetUser_WithInvalidId_ReturnsNotFound()
        {
            // Arrange
            var invalidId = Guid.NewGuid().ToString();

            // Act
            var result = await _controller.GetUser(invalidId);

            // Assert
            var notFoundResult = result.Result.Should().BeOfType<NotFoundObjectResult>().Subject;
            var error = notFoundResult.Value.Should().BeOfType<ScimError>().Subject;
            error.Status.Should().Be(404);
        }

        [Fact]
        public async Task GetUsers_WithDefaultParameters_ReturnsOkWithUserList()
        {
            // Act
            var result = await _controller.GetUsers();

            // Assert
            var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
            var listResponse = okResult.Value.Should().BeOfType<ScimListResponse<ScimUser>>().Subject;
            listResponse.TotalResults.Should().Be(_testUsers.Count);
            listResponse.Resources.Should().NotBeEmpty();
        }

        [Fact]
        public async Task GetUsers_WithPagination_ReturnsCorrectPage()
        {
            // Act
            var result = await _controller.GetUsers(startIndex: 6, count: 3);

            // Assert
            var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
            var listResponse = okResult.Value.Should().BeOfType<ScimListResponse<ScimUser>>().Subject;
            listResponse.StartIndex.Should().Be(6);
            listResponse.ItemsPerPage.Should().Be(3);
        }

        [Fact]
        public async Task GetUsers_WithFilter_ReturnsFilteredResults()
        {
            // Arrange
            var filter = "userName eq \"test@example.com\"";

            // Act
            var result = await _controller.GetUsers(filter: filter);

            // Assert
            var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
            _mockUserService.Verify(s => s.GetUsersAsync(1, 10, filter), Times.Once);
        }

        [Fact]
        public async Task CreateUser_WithValidUser_ReturnsCreatedWithLocation()
        {
            // Arrange
            var newUser = ScimTestDataGenerator.GenerateUser();
            newUser.Id = null; // Will be generated by service

            // Act
            var result = await _controller.CreateUser(newUser);

            // Assert
            var createdResult = result.Result.Should().BeOfType<CreatedAtActionResult>().Subject;
            var returnedUser = createdResult.Value.Should().BeOfType<ScimUser>().Subject;
            returnedUser.Id.Should().NotBeNullOrEmpty();
            createdResult.ActionName.Should().Be("GetUser");
        }

        [Fact]
        public async Task CreateUser_WithInvalidModel_ReturnsBadRequest()
        {
            // Arrange
            var invalidUser = new ScimUser(); // Missing required fields
            _controller.ModelState.AddModelError("UserName", "UserName is required");

            // Act
            var result = await _controller.CreateUser(invalidUser);

            // Assert
            var badRequestResult = result.Result.Should().BeOfType<BadRequestObjectResult>().Subject;
            var error = badRequestResult.Value.Should().BeOfType<ScimError>().Subject;
            error.Status.Should().Be(400);
        }

        [Fact]
        public async Task UpdateUser_WithValidUser_ReturnsOkWithUpdatedUser()
        {
            // Arrange
            var existingUser = _testUsers.First();
            var updatedUser = ScimTestDataGenerator.GenerateUser();
            updatedUser.Id = existingUser.Id;
            updatedUser.UserName = "updated@example.com";

            // Act
            var result = await _controller.UpdateUser(existingUser.Id!, updatedUser);

            // Assert
            var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
            var returnedUser = okResult.Value.Should().BeOfType<ScimUser>().Subject;
            returnedUser.UserName.Should().Be("updated@example.com");
        }

        [Fact]
        public async Task UpdateUser_WithMismatchedId_ReturnsBadRequest()
        {
            // Arrange
            var user = ScimTestDataGenerator.GenerateUser();
            var differentId = Guid.NewGuid().ToString();

            // Act
            var result = await _controller.UpdateUser(differentId, user);

            // Assert
            result.Result.Should().BeOfType<BadRequestObjectResult>();
            var badRequestResult = result.Result.Should().BeOfType<BadRequestObjectResult>().Subject;
            var error = badRequestResult.Value.Should().BeOfType<ScimError>().Subject;
            error.Status.Should().Be(400);
        }

        [Fact]
        public async Task UpdateUser_WithInvalidId_ReturnsNotFound()
        {
            // Arrange
            var invalidId = Guid.NewGuid().ToString();
            var user = ScimTestDataGenerator.GenerateUser();
            user.Id = invalidId;

            // Mock service to return null for invalid ID
            _mockUserService.Setup(s => s.UpdateUserAsync(invalidId, It.IsAny<ScimUser>()))
                .ReturnsAsync((ScimUser?)null);

            // Act
            var result = await _controller.UpdateUser(invalidId, user);

            // Assert
            result.Result.Should().BeOfType<NotFoundObjectResult>();
        }

        [Fact]
        public async Task PatchUser_WithValidPatch_ReturnsOkWithPatchedUser()
        {
            // Arrange
            var existingUser = _testUsers.First();
            var patchRequest = new ScimPatchRequest
            {
                Schemas = new List<string> { "urn:ietf:params:scim:api:messages:2.0:PatchOp" },
                Operations = new List<ScimPatchOperation>
                {
                    new() { Op = "replace", Path = "active", Value = false }
                }
            };

            // Act
            var result = await _controller.PatchUser(existingUser.Id!, patchRequest);

            // Assert
            result.Result.Should().BeOfType<OkObjectResult>();
            _mockUserService.Verify(s => s.PatchUserAsync(existingUser.Id!, patchRequest), Times.Once);
        }

        [Fact]
        public async Task PatchUser_WithInvalidId_ReturnsNotFound()
        {
            // Arrange
            var invalidId = Guid.NewGuid().ToString();
            var patchRequest = ScimTestDataGenerator.GeneratePatchRequest();

            // Mock service to return null for invalid ID
            _mockUserService.Setup(s => s.PatchUserAsync(invalidId, It.IsAny<ScimPatchRequest>()))
                .ReturnsAsync((ScimUser?)null);

            // Act
            var result = await _controller.PatchUser(invalidId, patchRequest);

            // Assert
            result.Result.Should().BeOfType<NotFoundObjectResult>();
        }

        [Fact]
        public async Task DeleteUser_WithValidId_ReturnsNoContent()
        {
            // Arrange
            var existingUser = _testUsers.First();

            // Act
            var result = await _controller.DeleteUser(existingUser.Id!);

            // Assert
            result.Should().BeOfType<NoContentResult>();
            _mockUserService.Verify(s => s.DeleteUserAsync(existingUser.Id!), Times.Once);
        }

        [Fact]
        public async Task DeleteUser_WithInvalidId_ReturnsNotFound()
        {
            // Arrange
            var invalidId = Guid.NewGuid().ToString();

            // Mock service to return false for invalid ID
            _mockUserService.Setup(s => s.DeleteUserAsync(invalidId))
                .ReturnsAsync(false);

            // Act
            var result = await _controller.DeleteUser(invalidId);

            // Assert
            result.Should().BeOfType<NotFoundObjectResult>();
        }

        [Theory]
        [InlineData(0)] // startIndex cannot be 0
        [InlineData(-1)] // startIndex cannot be negative
        public async Task GetUsers_WithInvalidStartIndex_ReturnsBadRequest(int invalidStartIndex)
        {
            // Act
            var result = await _controller.GetUsers(startIndex: invalidStartIndex);

            // Assert
            result.Result.Should().BeOfType<BadRequestObjectResult>();
            var badRequestResult = result.Result.Should().BeOfType<BadRequestObjectResult>().Subject;
            var error = badRequestResult.Value.Should().BeOfType<ScimError>().Subject;
            error.Status.Should().Be(400);
        }

        [Theory]
        [InlineData(0)] // count cannot be 0
        [InlineData(-1)] // count cannot be negative
        public async Task GetUsers_WithInvalidCount_ReturnsBadRequest(int invalidCount)
        {
            // Act
            var result = await _controller.GetUsers(count: invalidCount);

            // Assert
            result.Result.Should().BeOfType<BadRequestObjectResult>();
            var badRequestResult = result.Result.Should().BeOfType<BadRequestObjectResult>().Subject;
            var error = badRequestResult.Value.Should().BeOfType<ScimError>().Subject;
            error.Status.Should().Be(400);
        }

        [Fact]
        public async Task CreateUser_WithDuplicateUserName_ReturnsConflict()
        {
            // Arrange
            var existingUser = _testUsers.First();
            var duplicateUser = ScimTestDataGenerator.GenerateUser(userName: existingUser.UserName);

            // Mock service to throw exception for duplicate
            _mockUserService.Setup(s => s.CreateUserAsync(It.IsAny<ScimUser>()))
                .ThrowsAsync(new InvalidOperationException("Username already exists"));

            // Act
            var result = await _controller.CreateUser(duplicateUser);

            // Assert
            result.Result.Should().BeOfType<ConflictObjectResult>();
            var conflictResult = result.Result.Should().BeOfType<ConflictObjectResult>().Subject;
            var error = conflictResult.Value.Should().BeOfType<ScimError>().Subject;
            error.Status.Should().Be(409);
        }
    }
}
